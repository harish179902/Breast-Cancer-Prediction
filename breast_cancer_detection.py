# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_nD5omR3hVN_8vz9ZAoybv1GjN0pQomq

# **Breast Cancer Detection With Logistic Regression**
"""

#import libraries (numpy,sklearn)
import numpy as np
import sklearn.datasets

#getting the dataset
breast_cancer = sklearn.datasets.load_breast_cancer()
print(breast_cancer)

X = breast_cancer.data
Y = breast_cancer.target
print(X)
print(Y)

#shaping the data which makes us know the amount of data instances we have trained 
print(X.shape,Y.shape)

#import data to pandas dataframe [Manipulation of data]
import pandas as pd
data = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)
#adds label to this dataframe
data['class'] = breast_cancer.target 
data.head()

data.describe()

#To know the number of malignant and benign cases
print(data['class'].value_counts())

print(breast_cancer.target_names)

data.groupby('class').mean()

"""# 0 => Malignant
# 1 => Benign 
"""

#Train and Test Split
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y)
print(Y.shape, Y_train.shape, Y_test.shape)

#Reducing the testing data set
X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.1)
print(Y.shape, Y_train.shape, Y_test.shape)

print(Y.mean(), Y_train.mean(), Y_test.mean())
# Stratify -> For correct distribution of data as of original data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.1, stratify = Y)
print(Y.mean(), Y_train.mean(), Y_test.mean())

#random_state -> Specific split of data, each value of random_state split the data differently
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, stratify = Y, random_state = 1)
print(X_train.mean(), X_test.mean(), X.mean())

print(X_train)

"""# **Logistic Regression**"""

#import logistic regression from sklearn
from sklearn.linear_model import LogisticRegression
#Loading the logistic regression to the variable Classifier
classifier = LogisticRegression()
#training the model on training data
classifier.fit(X_train,Y_train)

"""# **Evaluation of the Model**"""

#import accuracy_score
from sklearn.metrics import accuracy_score
prediction_on_training_data = classifier.predict(X_train)
accuracy_on_training_data = accuracy_score (Y_train, prediction_on_training_data)
print("Accuracy of training data: ", accuracy_on_training_data)

#prediction of test_data
prediction_on_test_data = classifier.predict(X_test)
accuracy_on_testing_data = accuracy_score(Y_test, prediction_on_test_data)
print("Accuracy of testing data: ", accuracy_on_testing_data)

"""# **Detecting whether the Patient has breast cancer is Benign or Malignant Stage**
**Data Source : Kaggle**
"""

input_data = (13.05,19.31,82.61,527.2,0.0806,0.03789,0.000692,0.004167,0.1819,0.05501,0.404,1.214,2.595,32.96,0.007491,0.008593,0.000692,0.004167,0.0219,0.00299,14.23,22.25,90.24,624.1,0.1021,0.06191,0.001845,0.01111,0.2439,0.06289)

#change the input_data to numpy.array to make prediction
input_data_as_numpy_array = np.array(input_data)
print(input_data)

#reshape the array as we are predicting the output for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#prediction
prediction = classifier.predict(input_data_reshaped)
print(prediction)

#Return a list with element[0] if Malignant; returns a list with element[1], if benign
if (prediction[0]==0):
  print("The breast cancer is Malignant")
else:
  print("The breast cancer is Benign")